# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "main.baml": "generator PythonClient {\n  output_type \"python/pydantic\"\n  output_dir \"../baml_client\"\n  version \"0.202.1\"\n  default_client_mode \"async\"\n}\n\n// Simple User Profile for streaming demo\nclass UserProfile {\n  // Critical fields needed for next job execution (3 required)\n  name string @stream.not_null\n  email string @stream.not_null\n  is_verified bool\n  \n  // Optional fields that can stream with state information\n  bio string\n  age int\n  is_premium bool\n}\n\n// Define the client\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n    supports_streaming true\n  }\n}\n\n// Function to extract user profile from text\nfunction ExtractUserProfile(user_text: string) -> UserProfile {\n  client GPT4o\n  prompt #\"\n    You are a professional data extraction expert. Analyze the following text and extract user profile information.\n\n    Text to analyze:\n    {{ user_text }}\n    \n    Extract the following information:\n    \n    1. name: Extract the person's full name\n    2. email: Find and extract their email address\n    3. is_verified: Determine if this person appears to be verified/credible (true/false)\n    4. bio: Create a biographical description (2-3 sentences)\n    5. age: Extract their age if mentioned, or make a reasonable inference\n    6. is_premium: Determine if this person qualifies for premium status (true/false)\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function that represents the \"next job\" - only needs name and email\nfunction ProcessUser(name: string, email: string) -> string {\n  client GPT4o\n  prompt #\"\n    Generate a welcome message for:\n    Name: {{ name }}\n    Email: {{ email }}\n    \n    Create a personalized welcome message.\n  \"#\n}",
}

def get_baml_files():
    return _file_map