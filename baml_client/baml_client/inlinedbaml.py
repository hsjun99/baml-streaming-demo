# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "main.baml": "generator PythonClient {\n  output_type \"python/pydantic\"\n  output_dir \"../baml_client\"\n  version \"0.202.1\"\n  default_client_mode \"async\"\n}\n\n// Enterprise Employee Assessment System - Complex Schema\n// =======================================================\n\n// Enums for predefined values\nenum Department {\n  ENGINEERING\n  MARKETING  \n  SALES\n  HR\n  FINANCE\n  OPERATIONS\n  LEGAL\n  DESIGN\n  PRODUCT\n}\n\nenum SkillLevel {\n  BEGINNER\n  INTERMEDIATE  \n  ADVANCED\n  EXPERT\n}\n\nenum ProjectStatus {\n  PLANNING\n  IN_PROGRESS\n  COMPLETED\n  ON_HOLD\n  CANCELLED\n}\n\nenum ReviewRating {\n  EXCEEDS_EXPECTATIONS\n  MEETS_EXPECTATIONS\n  BELOW_EXPECTATIONS\n  NEEDS_IMPROVEMENT\n}\n\nenum EducationLevel {\n  HIGH_SCHOOL\n  ASSOCIATES\n  BACHELORS\n  MASTERS\n  PHD\n  CERTIFICATE\n}\n\n// Nested complex classes\nclass Company {\n  name string\n  industry string\n  size_employees int\n  headquarters_location string\n  stock_symbol string?\n}\n\nclass Skill {\n  name string\n  category string\n  level SkillLevel\n  years_experience int\n  last_used_year int?\n  certified bool\n}\n\nclass Certification {\n  name string\n  issuing_organization string\n  issue_date string\n  expiry_date string?\n  credential_id string?\n  is_active bool\n}\n\nclass Project {\n  name string\n  description string\n  status ProjectStatus\n  start_date string\n  end_date string?\n  budget_usd float?\n  team_size int\n  role_in_project string\n  technologies_used string[]\n  key_achievements string[]\n}\n\nclass PerformanceReview {\n  review_period string\n  overall_rating ReviewRating\n  goals_met_percentage float\n  strengths string[]\n  areas_for_improvement string[]\n  manager_feedback string\n  career_development_plan string?\n  salary_change_percentage float?\n}\n\nclass Education {\n  institution string\n  degree string\n  field_of_study string\n  level EducationLevel\n  graduation_year int\n  gpa float?\n  honors string?\n}\n\nclass EmergencyContact {\n  name string\n  relationship string\n  phone string\n  email string?\n  address string?\n}\n\nclass CompensationDetails {\n  base_salary_usd float\n  bonus_percentage float?\n  equity_shares int?\n  benefits_value_usd float?\n  total_compensation_usd float\n}\n\n// Main complex entity\nclass EmployeeProfile {\n  // Critical fields for immediate processing (fast transition triggers)\n  employee_id string @stream.with_state @stream.not_null\n  full_name string @stream.with_state @stream.not_null  \n  email string @stream.with_state @stream.not_null\n  department Department @stream.with_state @stream.not_null\n  job_title string @stream.with_state @stream.not_null\n  \n  // Basic employment info (somewhat critical)\n  hire_date string @stream.with_state\n  employment_status string @stream.with_state  // \"active\", \"contractor\", \"intern\"\n  manager_name string @stream.with_state\n  office_location string @stream.with_state\n  is_remote bool @stream.with_state\n  \n  // Personal details (can stream later)\n  phone string @stream.with_state\n  date_of_birth string @stream.with_state\n  address string @stream.with_state\n  nationality string @stream.with_state\n  languages_spoken string[] @stream.with_state\n  \n  // Complex nested objects (stream after basic info)\n  company Company @stream.with_state\n  skills Skill[] @stream.with_state\n  certifications Certification[] @stream.with_state\n  project_history Project[] @stream.with_state\n  performance_reviews PerformanceReview[] @stream.with_state\n  education_background Education[] @stream.with_state\n  emergency_contacts EmergencyContact[] @stream.with_state\n  compensation CompensationDetails @stream.with_state\n  \n  // Additional metadata (least critical, stream last)\n  security_clearance_level string? @stream.with_state\n  visa_status string? @stream.with_state\n  professional_summary string @stream.with_state\n  career_goals string @stream.with_state\n  years_total_experience int @stream.with_state\n  previous_companies string[] @stream.with_state\n  \n  // Computed/derived fields\n  is_senior_level bool @stream.with_state\n  performance_score float @stream.with_state\n  skill_diversity_score float @stream.with_state\n  promotion_eligible bool @stream.with_state\n}\n\n// Define the client\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n    supports_streaming true\n  }\n}\n\n// Function to extract comprehensive employee profile from resume/CV text\nfunction ExtractEmployeeProfile(resume_text: string) -> EmployeeProfile {\n  client GPT4o\n  prompt #\"\n    You are an expert HR data extraction specialist. Analyze the following resume/CV text and extract comprehensive employee profile information. Be thorough and detailed, inferring reasonable values where appropriate.\n\n    Resume/CV Text:\n    {{ resume_text }}\n    \n    Extract and structure the following information:\n    \n    CRITICAL INFORMATION (extract first):\n    - employee_id: Generate a reasonable ID like \"EMP\" + random number\n    - full_name: Complete name with titles if present\n    - email: Professional email address\n    - department: Choose from ENGINEERING, MARKETING, SALES, HR, FINANCE, OPERATIONS, LEGAL, DESIGN, PRODUCT\n    - job_title: Current or most recent position\n    \n    EMPLOYMENT DETAILS:\n    - hire_date, employment_status, manager_name, office_location, is_remote\n    \n    PERSONAL INFORMATION:\n    - phone, date_of_birth, address, nationality, languages_spoken\n    \n    COMPLEX NESTED DATA:\n    - company: Extract company details with name, industry, size, location\n    - skills: List with categories, proficiency levels (BEGINNER/INTERMEDIATE/ADVANCED/EXPERT), years of experience\n    - certifications: Professional certifications with dates and issuing organizations\n    - project_history: Major projects with descriptions, status, dates, technologies, achievements\n    - performance_reviews: Infer from achievements and career progression\n    - education_background: Schools, degrees, graduation years, GPAs if mentioned\n    - emergency_contacts: If mentioned, otherwise create reasonable placeholder\n    - compensation: Estimate based on role and experience level\n    \n    DERIVED METRICS:\n    - years_total_experience: Calculate from career timeline\n    - is_senior_level: Based on experience and role\n    - performance_score: Estimate 1-5 based on achievements\n    - skill_diversity_score: Rate 1-5 based on breadth of skills\n    - promotion_eligible: Based on performance and tenure\n    \n    Be comprehensive and realistic. Where information isn't explicit, make reasonable professional inferences based on the context provided.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Fast transition function - triggers when critical fields are ready\nfunction InitiateEmployeeOnboarding(\n  employee_id: string, \n  full_name: string, \n  email: string, \n  department: Department, \n  job_title: string\n) -> string {\n  client GPT4o\n  prompt #\"\n    Generate an employee onboarding initiation message for:\n    \n    Employee ID: {{ employee_id }}\n    Name: {{ full_name }}\n    Email: {{ email }}\n    Department: {{ department }}\n    Title: {{ job_title }}\n    \n    Create a professional onboarding welcome message that:\n    1. Welcomes them to the company\n    2. Mentions their department and role\n    3. Outlines next steps in the onboarding process\n    4. Provides their employee ID for reference\n    \n    Keep it professional but warm, and mention that additional profile information is being processed.\n  \"#\n}\n\n// Function to analyze complex employee data for insights\nfunction AnalyzeEmployeeProfile(profile: EmployeeProfile) -> string {\n  client GPT4o\n  prompt #\"\n    Analyze this comprehensive employee profile and provide insights:\n    \n    {{ profile }}\n    \n    Provide a detailed analysis covering:\n    1. Overall profile strength and experience level\n    2. Key skills and competencies\n    3. Career progression and achievements\n    4. Potential areas for development\n    5. Recommended role assignments or projects\n    6. Performance indicators and trends\n    \n    Focus on actionable insights for HR and management decisions.\n  \"#\n}",
}

def get_baml_files():
    return _file_map